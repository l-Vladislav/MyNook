---
description: 
globs: 
alwaysApply: true
---
# Code Quality Standards & Cursor Rules

## Core Code Quality
- Write clean, self-documenting code with meaningful variable and function names
- Prioritize code readability over cleverness - optimize for maintainability
- Try to follow SOLID principles and established design patterns
- Implement proper error handling with specific error types and descriptive messages
- Use tabs instead of space (1 Tab = 4 spaces)
- Maximum line length: 120 characters for better readability across devices
- Use camelCase for variables, functions, and methods
- Use PascalCase for classes, interfaces, and components
- Use SCREAMING_SNAKE_CASE for constants
- Before making changes, always understand the existing codebase context
- When encountering unfamiliar patterns, ask for clarification rather than assuming
- Learn from user feedback and adapt approach within the session
- Reference core-requirements.json constraints before proposing solutions

## Cursor-Specific Development Rules
- Stay focused on the current prompt/task - do not edit functions, routes, or components outside the current scope
- When you see potential improvements outside scope, ask permission before making changes
- When encountering linter errors, ask user how they prefer to handle them rather than auto-fixing
- For multi-file implementations, ask user which file to prioritize or start with
- When information is unclear or missing, ask for user clarification rather than making assumptions
- Complete implementations when possible, but use placeholder comments (like "// ... existing code ...") when context is unclear
- When edit operations fail, ask user to manually apply changes rather than auto-retrying
- For UI design decisions, ask user for styling preferences rather than assuming modern/beautiful defaults
- Critical rules (user preference): collaborative approach, ask for direction when uncertain
- Flexible rules (can auto-decide): syntax fixes, obvious bug corrections
